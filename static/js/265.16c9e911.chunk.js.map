{"version":3,"file":"static/js/265.16c9e911.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/Home/Movies.jsx","servises/api.js","constants/constants.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List } from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <h2>{title}</h2>\n          </Link>\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const Container = styled.div`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchInput = styled(Field)`\n  display: inline-block;\n  width: 500px;\n  height: 50%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const SearchForm = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const ButtonSearch = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n  }\n`;\n","import React from 'react';\nimport { GoSearch } from 'react-icons/go';\nimport { Formik } from 'formik';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  Container,\n  SearchInput,\n  ButtonSearch,\n  SearchForm,\n} from './SearchBox.styled';\n\nexport const SearchBox = ({ onSubmit, value }) => {\n  const handleSubmit = ({ search }) => {\n    if (search.trim() === '') {\n      toast('Введите название!');\n      return;\n    }\n\n    onSubmit(search);\n  };\n\n  return (\n    <Container>\n      <Formik initialValues={{ search: value }} onSubmit={handleSubmit}>\n        <SearchForm>\n          <ButtonSearch type=\"submit\">\n            <GoSearch width=\"20\" height=\"20\" fill=\"grey\" />\n          </ButtonSearch>\n          <SearchInput name=\"search\" />\n        </SearchForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { SearchBox } from 'components/SearchBox/SearchBox';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieSearch } from 'servises/api';\nimport { MovieList } from 'components/MovieList/MovieList';\n\n//getMovieSearch('cats').then(console.log);\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filterParam = searchParams.get('filter') ?? '';\n\n  useEffect(() => {\n    if (filterParam === '') {\n      return;\n    }\n    const getMovies = async () => {\n      const response = await getMovieSearch(filterParam);\n\n      setMovies(response.data.results);\n    };\n    getMovies();\n  }, [filterParam]);\n\n  const handleSubmit = search => {\n    setSearchParams(search !== '' ? { filter: search } : {});\n  };\n\n  return (\n    <>\n      <SearchBox value={filterParam} onSubmit={handleSubmit} />\n      {movies.length > 0 && <MovieList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { BASE_URL, API_KEY } from 'constants/constants';\n\nconst movieApi = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const searchMovies = async () => {\n  try {\n    const response = await movieApi.get('/trending/movie/day');\n\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const infoMovie = async id => {\n  try {\n    const response = await movieApi.get(`/movie/${id}`);\n\n    return response;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await movieApi.get(`/movie/${id}/reviews`);\n\n    return response;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await movieApi.get(`/movie/${id}/credits`);\n\n    return response;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getMovieSearch = async query => {\n  try {\n    const response = await movieApi.get(`/search/movie`, {\n      params: {\n        query,\n      },\n    });\n\n    return response;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n","export const API_KEY = '18a83c57cdad2caf2727c80f23ceed6b';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n"],"names":["List","styled","MovieList","movies","location","useLocation","map","id","title","to","state","from","Container","SearchInput","Field","SearchForm","Form","ButtonSearch","SearchBox","onSubmit","value","initialValues","search","trim","toast","type","width","height","fill","name","useState","setMovies","useSearchParams","searchParams","setSearchParams","filterParam","get","useEffect","getMovies","getMovieSearch","response","data","results","filter","length","movieApi","axios","baseURL","params","api_key","searchMovies","message","infoMovie","getMovieReviews","getMovieCredits","query"],"sourceRoot":""}